import os
import subprocess
import sys

from services.restic import load_restic_env
from services.logger import create_log_file, log

# === Carregar configura√ß√µes do Restic ===
try:
    RESTIC_REPOSITORY, env, _ = load_restic_env()
except ValueError as e:
    print(f"[FATAL] {e}")
    sys.exit(1)

# Diret√≥rio onde os logs ser√£o salvos
LOG_DIR = os.getenv("LOG_DIR", "logs")

# === Configura√ß√µes de backup ===
SOURCE_DIRS = os.getenv("BACKUP_SOURCE_DIRS", "").split(",")  # m√∫ltiplos diret√≥rios
EXCLUDES = os.getenv("RESTIC_EXCLUDES", "").split(",")        # padr√µes de exclus√£o
TAGS = os.getenv("RESTIC_TAGS", "").split(",")                # tags aplicadas ao snapshot

# === Pol√≠tica de reten√ß√£o configur√°vel ===
RETENTION_ENABLED = os.getenv("RETENTION_ENABLED", "true").lower() == "true"
RETENTION_KEEP_HOURLY  = os.getenv("RETENTION_KEEP_HOURLY", "0")
RETENTION_KEEP_DAILY = os.getenv("RETENTION_KEEP_DAILY", "7")
RETENTION_KEEP_WEEKLY = os.getenv("RETENTION_KEEP_WEEKLY", "4")
RETENTION_KEEP_MONTHLY = os.getenv("RETENTION_KEEP_MONTHLY", "6")

# === Verifica√ß√µes m√≠nimas obrigat√≥rias ===
if not any(SOURCE_DIRS):
    print("[FATAL] Vari√°veis obrigat√≥rias ausentes no .env")
    sys.exit(1)

# === Cria arquivo de log com timestamp ===
log_filename = create_log_file("backup", LOG_DIR)

# === Monta argumentos repetidos como --tag ou --exclude ===
def build_args(prefix, items):
    """Repete ``prefix`` para cada item n√£o vazio.

    Parameters
    ----------
    prefix: str
        Flag a ser repetida, por exemplo ``"--tag"``.
    items: list[str]
        Itens que ser√£o associados ao prefixo.
    """
    return [arg for i in items for arg in (prefix, i.strip()) if i.strip()]

# === Fun√ß√£o principal que executa backup e reten√ß√£o ===
def run_backup():
    with open(log_filename, "w", encoding="utf-8") as log_file:
        log("=== Iniciando backup com Restic ===", log_file)

        # === Verifica se o reposit√≥rio √© acess√≠vel ===
        log("üîç Verificando acesso ao reposit√≥rio...", log_file)
        try:
            subprocess.run(
                ["restic", "-r", RESTIC_REPOSITORY, "snapshots"],
                env=env, check=True, stdout=log_file, stderr=log_file
            )
            log("‚úÖ Reposit√≥rio acess√≠vel.", log_file)
        except subprocess.CalledProcessError:
            log("N√£o foi poss√≠vel acessar o reposit√≥rio. Abortando.", log_file)
            return

        # === Executa o backup propriamente dito ===
        cmd_backup = ["restic", "-r", RESTIC_REPOSITORY, "backup"]
        cmd_backup += [d.strip() for d in SOURCE_DIRS if d.strip()]
        cmd_backup += build_args("--exclude", EXCLUDES)
        cmd_backup += build_args("--tag", TAGS)

        log(f"Executando backup de: {', '.join(SOURCE_DIRS)}", log_file)
        try:
            subprocess.run(cmd_backup, env=env, check=True, stdout=log_file, stderr=log_file)
            log("Backup conclu√≠do.", log_file)
        except subprocess.CalledProcessError:
            log("Erro durante o backup.", log_file)

        # === Se ativado, aplica pol√≠tica de reten√ß√£o ===
        if RETENTION_ENABLED:
            log("Aplicando pol√≠tica de reten√ß√£o...", log_file)
            cmd_retention = [
                "restic", "-r", RESTIC_REPOSITORY, "forget",
                "--keep-hourly", RETENTION_KEEP_HOURLY,     
                "--keep-daily", RETENTION_KEEP_DAILY,
                "--keep-weekly", RETENTION_KEEP_WEEKLY,
                "--keep-monthly", RETENTION_KEEP_MONTHLY,
                "--prune"
            ]
            try:
                subprocess.run(cmd_retention, env=env, check=True, stdout=log_file, stderr=log_file)
                log("Pol√≠tica de reten√ß√£o aplicada.", log_file)
            except subprocess.CalledProcessError:
                log("Erro ao aplicar reten√ß√£o.", log_file)
        else:
            log("Reten√ß√£o desativada via .env.", log_file)

        log("=== Fim do backup ===", log_file)

# === Execu√ß√£o principal ===
if __name__ == "__main__":
    try:
        run_backup()
    except Exception as e:
        print(f"[FATAL] Erro inesperado: {e}")
        sys.exit(1)
