#!/usr/bin/env python3
"""
Script para reconstruir √≠ndice do reposit√≥rio Restic - Safestic
Reconstr√≥i o √≠ndice quando h√° corrup√ß√£o ou problemas de performance
"""

import os
import sys
import subprocess
from pathlib import Path
from dotenv import load_dotenv

def load_config():
    """Carrega configura√ß√µes do .env"""
    env_path = Path('.env')
    if not env_path.exists():
        print("‚ùå Arquivo .env n√£o encontrado")
        return False
    
    load_dotenv(env_path)
    return True

def build_restic_env():
    """Constr√≥i vari√°veis de ambiente para o Restic"""
    env = os.environ.copy()
    
    # Configurar reposit√≥rio baseado no provedor
    provider = os.getenv('STORAGE_PROVIDER', '').lower()
    bucket = os.getenv('STORAGE_BUCKET', '')
    
    if provider == 'local':
        env['RESTIC_REPOSITORY'] = bucket
    elif provider == 'aws':
        env['RESTIC_REPOSITORY'] = f's3:{bucket}'
        # Credenciais AWS
        if os.getenv('AWS_ACCESS_KEY_ID'):
            env['AWS_ACCESS_KEY_ID'] = os.getenv('AWS_ACCESS_KEY_ID')
        if os.getenv('AWS_SECRET_ACCESS_KEY'):
            env['AWS_SECRET_ACCESS_KEY'] = os.getenv('AWS_SECRET_ACCESS_KEY')
        if os.getenv('AWS_DEFAULT_REGION'):
            env['AWS_DEFAULT_REGION'] = os.getenv('AWS_DEFAULT_REGION')
    elif provider == 'azure':
        account = os.getenv('AZURE_ACCOUNT_NAME')
        env['RESTIC_REPOSITORY'] = f'azure:{account}:{bucket}'
        # Credenciais Azure
        if os.getenv('AZURE_ACCOUNT_KEY'):
            env['AZURE_ACCOUNT_KEY'] = os.getenv('AZURE_ACCOUNT_KEY')
    elif provider == 'gcp':
        env['RESTIC_REPOSITORY'] = f'gs:{bucket}'
        # Credenciais GCP
        if os.getenv('GOOGLE_APPLICATION_CREDENTIALS'):
            env['GOOGLE_APPLICATION_CREDENTIALS'] = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')
        if os.getenv('GOOGLE_PROJECT_ID'):
            env['GOOGLE_PROJECT_ID'] = os.getenv('GOOGLE_PROJECT_ID')
    
    # Senha do reposit√≥rio
    env['RESTIC_PASSWORD'] = os.getenv('RESTIC_PASSWORD', '')
    
    return env

def check_repository_access():
    """Verifica se o reposit√≥rio est√° acess√≠vel"""
    print("üîç Verificando acesso ao reposit√≥rio...")
    
    try:
        env = build_restic_env()
        result = subprocess.run(
            ['restic', 'cat', 'config'],
            env=env,
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode == 0:
            print("‚úÖ Reposit√≥rio acess√≠vel")
            return True
        else:
            print(f"‚ùå Erro ao acessar reposit√≥rio: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå Timeout ao acessar reposit√≥rio")
        return False
    except FileNotFoundError:
        print("‚ùå Restic n√£o encontrado. Verifique se est√° instalado e no PATH.")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def rebuild_index(read_all_packs=False):
    """Reconstr√≥i o √≠ndice do reposit√≥rio"""
    print("üîß Reconstruindo √≠ndice do reposit√≥rio...")
    
    # Construir comando
    cmd = ['restic', 'rebuild-index']
    
    if read_all_packs:
        cmd.append('--read-all-packs')
        print("üìã Modo: Leitura completa de todos os packs (mais lento, mais completo)")
    else:
        print("üìã Modo: Reconstru√ß√£o r√°pida (padr√£o)")
    
    # Construir ambiente
    env = build_restic_env()
    
    print(f"üìã Comando: {' '.join(cmd)}")
    print()
    print("‚ö†Ô∏è  ATEN√á√ÉO:")
    print("   - Esta opera√ß√£o pode demorar dependendo do tamanho do reposit√≥rio")
    print("   - O reposit√≥rio ficar√° temporariamente inacess√≠vel")
    print("   - N√£o interrompa o processo")
    print()
    
    try:
        # Executar comando
        process = subprocess.Popen(
            cmd,
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            universal_newlines=True
        )
        
        print("üöÄ Iniciando reconstru√ß√£o...")
        
        # Mostrar progresso
        for line in process.stdout:
            if line.strip():
                print(f"üìã {line.strip()}")
        
        # Aguardar conclus√£o
        return_code = process.wait()
        
        if return_code == 0:
            print("‚úÖ √çndice reconstru√≠do com sucesso!")
            return True
        else:
            print(f"‚ùå Erro na reconstru√ß√£o (c√≥digo: {return_code})")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao reconstruir √≠ndice: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå Restic n√£o encontrado. Verifique se est√° instalado e no PATH.")
        return False
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Opera√ß√£o interrompida pelo usu√°rio")
        print("‚ùå ATEN√á√ÉO: O reposit√≥rio pode estar em estado inconsistente")
        print("üí° Execute novamente para completar a reconstru√ß√£o")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def verify_index():
    """Verifica a integridade do √≠ndice ap√≥s reconstru√ß√£o"""
    print("üîç Verificando integridade do √≠ndice...")
    
    try:
        env = build_restic_env()
        result = subprocess.run(
            ['restic', 'check', '--read-data-subset=5%'],
            env=env,
            capture_output=True,
            text=True,
            timeout=300  # 5 minutos
        )
        
        if result.returncode == 0:
            print("‚úÖ √çndice verificado com sucesso")
            return True
        else:
            print(f"‚ö†Ô∏è  Problemas encontrados na verifica√ß√£o:")
            print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è  Timeout na verifica√ß√£o (reposit√≥rio muito grande)")
        print("üí° Execute 'make check' manualmente para verifica√ß√£o completa")
        return True  # N√£o falhar por timeout
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîß Safestic - Rebuild Index")
    print()
    
    # Carregar configura√ß√£o
    if not load_config():
        return 1
    
    # Verificar argumentos
    read_all_packs = '--read-all-packs' in sys.argv or '--full' in sys.argv
    
    if read_all_packs:
        print("üîç Modo completo ativado (--read-all-packs)")
        print("‚è±Ô∏è  Esta opera√ß√£o ser√° mais lenta mas mais completa")
        print()
    
    # Verificar acesso ao reposit√≥rio
    if not check_repository_access():
        return 1
    
    # Reconstruir √≠ndice
    if not rebuild_index(read_all_packs):
        return 1
    
    # Verificar resultado
    if not verify_index():
        print("‚ö†Ô∏è  Reconstru√ß√£o conclu√≠da mas verifica√ß√£o falhou")
        print("üí° Execute 'make check' para diagn√≥stico completo")
        return 1
    
    print()
    print("üéâ Reconstru√ß√£o do √≠ndice conclu√≠da com sucesso!")
    print("üí° Recomenda√ß√µes:")
    print("   - Execute 'make check' para verifica√ß√£o completa")
    print("   - Execute 'make prune' se necess√°rio")
    print("   - Monitore pr√≥ximos backups para garantir estabilidade")
    
    return 0

if __name__ == '__main__':
    sys.exit(main())